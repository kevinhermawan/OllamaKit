//
//  OllamaKit+Generate.swift
//
//
//  Created by Kevin Hermawan on 02/01/24.
//

import Alamofire
import Combine
import Foundation

extension OllamaKit {
    /// Establishes an asynchronous stream for responses from the Ollama API, based on the provided data.
    ///
    /// This method sets up a streaming connection using Swift's concurrency features, allowing for real-time data handling as the responses are generated by the Ollama API.
    ///
    /// ```swift
    /// let ollamaKit = OllamaKit()
    /// let requestData = OKGenerateRequestData(/* parameters */)
    ///
    /// Task {
    ///     do {
    ///         for try await response in ollamaKit.generate(data: requestData) {
    ///             // Handle each generated response
    ///         }
    ///     } catch {
    ///         // Handle error
    ///     }
    /// }
    /// ```
    ///
    /// - Parameter data: The ``OKGenerateRequestData`` used to initiate the streaming from the Ollama API.
    /// - Returns: An `AsyncThrowingStream<OKGenerateResponse, Error>` emitting the live stream of responses from the Ollama API.
    public func generate(data: OKGenerateRequestData) -> AsyncThrowingStream<OKGenerateResponse, Error> {
        AsyncThrowingStream { continuation in
            let request = AF.streamRequest(router.generate(data: data)).validate()
            var buffer = Data()
            
            request.responseStream { stream in
                switch stream.event {
                case .stream(let result):
                    switch result {
                    case .success(let data):
                        buffer.append(data)
                        
                        while let chunk = extractNextJSON(from: &buffer) {
                            do {
                                let response = try decoder.decode(OKGenerateResponse.self, from: chunk)
                                continuation.yield(response)
                            } catch {
                                continuation.finish(throwing: error)
                                return
                            }
                        }
                    case .failure(let error):
                        continuation.finish(throwing: error)
                    }
                case .complete(_):
                    continuation.finish()
                }
            }
        }
    }
    
    /// Establishes a Combine publisher for streaming responses from the Ollama API, based on the provided data.
    ///
    /// This method sets up a streaming connection using the Combine framework, allowing for real-time data handling as the responses are generated by the Ollama API.
    ///
    /// ```swift
    /// let ollamaKit = OllamaKit()
    /// let requestData = OKGenerateRequestData(/* parameters */)
    ///
    /// ollamaKit.generate(data: requestData)
    ///     .sink(receiveCompletion: { completion in
    ///         // Handle completion or error
    ///     }, receiveValue: { generateResponse in
    ///         // Handle each generated response
    ///     })
    ///     .store(in: &cancellables)
    /// ```
    ///
    /// - Parameter data: The ``OKGenerateRequestData`` used to initiate the streaming from the Ollama API.
    /// - Returns: An `AnyPublisher<OKGenerateResponse, Error>` emitting the live stream of responses from the Ollama API.
    public func generate(data: OKGenerateRequestData) -> AnyPublisher<OKGenerateResponse, Error> {
        let subject = PassthroughSubject<OKGenerateResponse, Error>()
        let request = AF.streamRequest(router.generate(data: data)).validate()
        var buffer = Data()
        
        request.responseStream { stream in
            switch stream.event {
            case .stream(let result):
                switch result {
                case .success(let data):
                    buffer.append(data)
                    
                    while let chunk = extractNextJSON(from: &buffer) {
                        do {
                            let response = try decoder.decode(OKGenerateResponse.self, from: chunk)
                            subject.send(response)
                        } catch {
                            subject.send(completion: .failure(error))
                            return
                        }
                    }
                case .failure(let error):
                    subject.send(completion: .failure(error))
                }
            case .complete(_):
                subject.send(completion: .finished)
            }
        }
        
        return subject.eraseToAnyPublisher()
    }
}
