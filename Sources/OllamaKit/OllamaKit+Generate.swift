//
//  OllamaKit+Generate.swift
//
//
//  Created by Kevin Hermawan on 02/01/24.
//

import Alamofire
import Combine
import Foundation

extension OllamaKit {
    /// Establishes a Combine publisher for streaming responses from the Ollama API, based on the provided data.
    ///
    /// This method sets up a streaming connection using the Combine framework, allowing for real-time data handling as the responses are generated by the Ollama API.
    ///
    /// ```swift
    /// let ollamaKit = OllamaKit(baseURL: URL(string: "http://localhost:11434")!)
    /// let requestData = OKGenerateRequestData(/* parameters */)
    ///
    /// ollamaKit.generate(data: requestData)
    ///     .sink(receiveCompletion: { completion in
    ///         // Handle completion or error
    ///     }, receiveValue: { generateResponse in
    ///         // Handle each generated response
    ///     })
    ///     .store(in: &cancellables)
    /// ```
    ///
    /// - Parameter data: The ``OKGenerateRequestData`` used to initiate the streaming from the Ollama API.
    /// - Returns: An `AnyPublisher<OKGenerateResponse, AFError>` emitting the live stream of responses from the Ollama API.
    public func generate(data: OKGenerateRequestData) -> AnyPublisher<OKGenerateResponse, AFError> {
        return Future<OKGenerateResponse, AFError> { promise in
            let request = AF.streamRequest(router.generate(data: data)).validate()
            
            request.responseStreamDecodable(of: OKGenerateResponse.self, using: decoder) { stream in
                switch stream.event {
                case .stream(let result):
                    switch result {
                    case .success(let response):
                        promise(.success(response))
                    case .failure(let error):
                        promise(.failure(error))
                    }
                case .complete(_):
                    break
                }
            }
        }.eraseToAnyPublisher()
    }
}
